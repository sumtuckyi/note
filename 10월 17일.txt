팔로우 기능 구현하기 
에 앞서 사용자별 프로필 페이지 생성
-> 개인 프로필 페이지에 팔로우 버튼 추가 
-> 1번 유저가 2번 유저의 팔로우 버튼을 누르면 중개 테이블에 1->2관계가 생성되어야 한다.

※로그인이 되어 있다면 request.user로 현재 로그인한 유저의 정보에 접근이 가능하다. 

User(M)-User(N)
0명 이상의 회원은 0명 이상의 회원과 관련
??자기 자신과 다대다 관계를 맺는다 = 동일한 클래스의 다른 인스턴스와 관계를 형성한다. 
ex) 어떤 댓글에 대댓글을 다는 경우

# me.followers.all() -> 나를 팔로우하는 모든 사용자에 접근
# me.followings.all() -> 내가 팔로우하는 모든 사용자에 접근

exists()
: QuerySet에 결과가 포함되어 있으면 True를 반환함 

※Fixtures
Django가 데이터베이스로 가져오는 방법을 알고 있는 데이터 모음
깃에서 프로젝트 파일을 가져올 때(pull or clone), 데이터베이스 파일이 빠져있기 때문에(gitignore)
새로 채워넣어야 하는데 이러한 부담을 줄여준다. 
즉, 동일한 프로젝트의 앱을 처음 설정할 때, 동일하게 사용할 수 있는 데이터가 있으면 편리하다.
-dumpdata : 데이터베이스의 데이터를 모두 추출하여 json파일로 생성해 줌
$ python manage.py dumpdata --indent 4 articles.article(앱 이름.테이블 이름) > articles.json(생성할 파일명) 
-loaddata : json파일의 내용을 데이터베이스에 채워줌  
$ python manage.py loaddata article.json comments.json users.json
Fixtures파일 기본경로
'app_name/fixtures/'
☞주의할 점 : loaddata 시, 파일 하나씩 명령어를 실행한다면 테이블 간 참조관계를 고려해야 함
-> 하나의 명령어로 모든 파일을 로드하는 경우라면 상관없음

※Improve Query★★
데이터의 크기가 커지면 동일한 조회라도 소요시간이 늘어난다.
쿼리 조회의 효율을 개선하는 방법..
실습내용
같은 결과를 얻기 위해 하는 쿼리 개수를 점차 줄여보기
한 페이지에 여러 개의 게시글을 출력할 때, 각 게시글마다 댓글 개수를 반복해서 평가하고 있음
-> 게시글 조회 시에 댓글 수를 함께 세어서 같이 가져와보자
각 게시글마다 댓글 개수를 반복해서 평가하고 있음
-> 게시글 조회 시에 유저 정보까지 같이 가져와보자 
-> 게시글 조회 시에 참조된 댓글까지 한번에 조회에서 가져와보자

-annotate이용하기 :  
-select_related :
-prefetched_related: 


