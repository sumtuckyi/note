REST framework

REST API란
: 어플리케이션과 서버가 서로 요청과 응답을 주고 받을 수 있게 하는 방식으로
REST방법론을 따르는 것을 의미 

REST란
: REST API를 개발하기 위한 일종의 소프트웨어 설계 방법론

RESTful API
★자원을 정의★하고 ★자원에 대한 주소를 지정★하는 전반적인 방법을 서술 
-자원을 식별 : URI -> url로는 자원을 식별만 하고 자원의 행동
(이전에는 articles/update or articles/create처럼 url을 별도로 생성함)은 HTTP method로 표현하자
-자원의 행위 : HTTP method 
-자원의 표현 : JSON데이터 권장 / 궁극적으로 표현되는 데이터 결과물

URI
인터넷에서 리소스를 식별하는 문자열, 가장 일반적인 URI는 웹주소로 알려진 URL(uniform resource locator)
-★url★ : 네트워크 상에 리소스가 어디 있는지를 알려주기 위한 약속, 자원을 식별하기 위함 
(URL의 구성요소)
-http(s) : 브라우저가 리소스를 요청하는 데 사용해야 하는 규약 
-domain name : 요청 중인 웹 서버를 나타내는 IP주소 대신 사용
-port : 웹 서버의 리소스에 접근하는 데 사용되는 기술적인 문 , 표준포트만 생략 가능
 / 웹서버도 프로세스 형태로 돌아가는데 각 프로세스는 고유한 식별자가 필요, 프로세스별로 다른 포트넘버를 부여하여 구분함
포트 번호 별로 해당하는 프로토콜에 의해 사용된다. 예를 들어 웹서버가 프로세스로 돌고 있으면 이때 해당 웹서버의 포트넘버를
사용하는 프로토콜은 5계층 중 트랜스포트 프로토콜이다. 

-path to the file : 웹 서버의 리소스 경로 
-parameters : 웹 서버에 제공하는 추가적인 데이터 / '&'기호로 구분되는 key-value쌍 목록 
서버는 리소스를 응답하기 전에 파라미터를 이용하여 추가 작업을 수행할 수 있다. 
-anchor : 웹 페이지 내에서 북마크 역할(anchor가 있으면 렌더링 시 해당 위치로 스크롤이 이동), 서버에서 수행하는 동작과는 무관하고 브라우저에서 처리함 

HTTP Request Methods
: GET(조회), POST(생성), PUT(수정), DELETE(삭제)
HTTP Response status codes 

지금까지 실습에서 사용한 장고 서버는 사용자에게 페이지(html)만 응답하고 있었음 - render()이용( 렌더 시마다 새로고침 발생)
즉, 프론트까지 담당하고 있었음 + 개발 서버로서 배포 시 구분되는 웹서버, API서버, WAS와는 별개의 개념
하지만 서버는 페이지 뿐만 아니라 다양한 데이터 타입을 응답할 수 있음
REST API는 JSON 권장 
이제부터는 html파일(template)이 아니라 json파일을 응답할 것임 => REST API 서버로 전환 
(이 json파일을 자바스크립트로 작성한 프론트엔드 프레임워크가 받아서 처리하여 사용자에게 보여줄 것임)

※복습 - python requests 라이브러리 
HTTP 요청을 보내고 응답을 받기 위해 사용 

-REST API 서버로서 장고 
서버에서 어떤 ★url★로 요청을 받았을 때, 요청에 따른 응답을 보냄
 
DRF
장고에서 REST API 서버를 쉽게 구축할 수 있도록 도와주는 오픈소스 라이브러리

★serialization★
: 여러 시스템(어떠한 언어나 환경)에서 활용하기 위해 데이터 구조나 객체 상태를 
나중에 재구성할 수 있는 포맷(예를 들어 JSON, XML)으로 변환하는 과정
serialization을 수행하는 클래스를 serializers.py에서 생성 (장고는 이 클래스를 모델폼과 유사하게 만들어 제공)
ex) 데이터베이스의 원하는 테이블에서 단일 쿼리나 쿼리셋에 접근 
-> 사전에 정의한 커스텀 ModelSerializer를 이용하여 포맷을 변환(to JSON)


<DRF 실습하기>
-가상환경에서 의존성 파일을 이용해 라이브러리 설치
-app and the rest_framework app to INSTALLED_APPS 
-원하는 폴더에서 원하는 파일명으로 파일 하나 생성하고 serializer class 정의 
: ModelSerializer / Serializer가 있음 (ModelForm과 Form처럼)
※ModelSerializer : 장고 Model과 연결된 Serializer class 
-views.py에서 함수 정의시 활용 : @api_view()를 필수로 작성해야함
※api_view decorator : 함수 실행 전에  HTTP method를 확인, 인자를 전달하지 않으면 기본적으로 GET method만 허용한다.
DRF view함수가 응답해야 하는 HTTP메서드 목록을 작성 

※일반 serializer / 모델 serializer 로 구분
모델 serializer - 어떤 모델을 기반으로 할 것인지 지정

<GET(조회), POST(생성), PUT(수정), DELETE(삭제) 실습> - DRF view함수 작성해보기 
-생성기능 구현 시, 별도의 url(create.html)을 생성하여 거기서 데이터를 입력받을 필요가 없음(pk도 따로 인자로 받을 필요가 없음),
대신 게시글 목록을 출력하는 페이지와 url을 함께 사용
REST 약속에 따르면 URL에 자원의 행위를 나타내지 않기를 권고
-삭제기능 구현 시 상세페이지를 보여주는 함수(article_pk를 인자로 받음)에서 같이 구현할 것임
-수정기능 구현 시 상세페이지를 보여주는 함수에서 같이 구현할 것임

※is_valid()함수의 raise_exception인자
: 유효성 검사 오류가 발생하는 경우 이전에는 따로 return Response()를 작성해주다보니
동일한 코드가 반복됨 -> 유효성 검사 오류가 발생하는 경우에만 ValidationError예외를 발생시키도록
인자값을 True로 하여 함수에 전달 -> DRF에서 제공하는 기본 예외 처리기에 의해 자동으로 처리되며
기본적으로  HTTP 400응답을 반환한다.  