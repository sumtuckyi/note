컴포넌트 구조의 단순화
상태(state, 앱 구동에 필요한 기본 데이터), 뷰(view, 상태를 선언적으로 매핑하여 시각화), 
기능(action, 뷰에서 사용자 입력에 대해 반응적으로 상태를 변경할 수 있게 정의된 동작)
-> 데이터를 시각화하고 사용자의 행위에 대해 반응적으로 데이터를 변경

여러 컴포넌트가 상태(state)를 공유할 때, 
1)여러 뷰가 동일한 상태에 종속되는 경우나
: 공유 상태를 공통 조상 컴포넌트로 끌어올려 props로 자식 컴포넌트에 전달해줘야함
2)서로 다른 뷰의 기능이 동일한 상태를 변경시켜야 하는 경우
: 발신된 이벤트를 통해 상태의 여러 복사본을 변경 및 동기화해야함
-> 데이터 관리의 패턴 유지가 어려워짐
=> 각 컴포넌트의 공유 상태를 추출하여 ★전역에서 참조할 수 있는 저장소★에서 관리하자..!
: 컴포넌트 트리는 하나의 큰 뷰가 되고 모든 컴포넌트는 ★★트리 계층 구조에 관계없이 상태에 접근하거나 
기능을 사용할 수 있음★★

Pinia
: state management library, flux design pattern을 따름 
(구성요소)
-store : 중앙 저장소, 모든 컴포넌트가 공유하는 상태, 기능 등이 작성됨
1)state: ref()
2)getters: computed()
3)actions: function(), state를 조작, 비동기, API호출 등의 작업을 수행함
-plugin : 추가 기능을 제공하거나 확장하는 도구나 모듈, 패키지 매니저로 설치 이후 별도 설정을 통해 추가됨
ex) pinia-plugin-persistedstate(state를 브라우저의 로컬 스토리지나 세션 스토리지에 영구적으로 저장하고 복원하는 기능을 제공)
1. $npm i pinia-plugin-persistedstate
2. 설치 및 등록
: import piniaPluginPersistedstate from 'pinia-plugin-persistedstate'
3. defineStore의 3번째 인자로 {persist: true}를 추가

※local storage
: 브라우저 내에 key-value 쌍을 저장하는 웹 스토리지 객체
-웹 애플리케이션에서 사용자 설정, 상태 정보, 캐시 데이터 등을 클라이언트 측에서 보관하여 웹사이트의 성능을 향상시키고 사용자 경험을 개선하기 위함


