인증 : 수신된 요청을 해당 요청의 사용자 또는 자격 증명과 연결하는 매커니즘
-항상 view함수 시작 시, 다른 코드의 진행이 허용되기 전에 실행됨
-단순히 요청에 사용된 자격 증명만 식별
권한 : 요청에 대한 접근 허용 또는 거부 여부를 결정

-요청된 자원에 대한 유효한 인증 자격 증명이 없는 것과 서버에 요청이 전달되었지만 권한 때문에 거절된 것은 다름 
401Unauthorized - 유효한 인증 자격이 없음
403Forbidden - 유효한 인증 자격은 있지만 권한이 없음

인증 체계 설정 방법
1.전역 설정 
: 인증이 필요하지 않은 요청도 있기 때문에 적절하지 않은 경우가 있음
2.view 함수 별 설정

DRF 인증 체계
그 중 TokenAuthentication을 사용할 것임 / IsAuthenticated 권한 설정 방식을 사용할 것임
: 서버가 사용자에게 토큰을 발급하여/ 사용자는 매 요청마다 발급받은 토큰을 요청과 함께 보내/ 인증 과정을 거침
-서버가 ★로그인 시★ 사용자에 토큰을 발급
ex) 
{
    "key": "2fb796eb065d291fc6cc7504fb7cdfdec63d400d"
}  
-> json형식으로 토큰 발급
-사용자가 토큰을 저장
-★★사용자가 요청시 토큰을 함께 전송★★

1)인증 클래스 설정, 2)INSTALLED_APPS 추가
: 전역 설정으로 기본적으로 모든 view 함수가 토큰 기반 인증이 진행될 수 있도록 설정(settings.py)
Dj-Rest_Auth : 회원 가입, 인증(소셜미디어 인증), 비밀번호 재설정, 사용자 세부 정보 검색, 회원 정보 수정 등 다양한 인증 관련 기능을 제공
$pip install dj-rest-auth -> 앱 등록
3) migrate
4)accounts/signals.py에서 함수 작성

※소셜 로그인 사용자는 별도의 테이블에 저장됨

Authorization : Token 2fb796eb065d291fc6cc7504fb7cdfdec63d400d

accounts/ password/reset/ [name='rest_password_reset']
accounts/ password/reset/confirm/ [name='rest_password_reset_confirm']
accounts/ login/ [name='rest_login']
accounts/ logout/ [name='rest_logout']
accounts/ user/ [name='rest_user_details']
accounts/ password/change/ [name='rest_password_change']
accounts/signup/

환율 api
jW3k8gekURQwXqn2lXuGjydxsfnPdH4H
