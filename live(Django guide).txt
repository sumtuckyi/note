<Django Framework>

프레임워크로서 django
Framework
: 기본적인 구조, 도구, 규칙 등을 제공하므로 개발자는 필수적인 핵심 개발에만 집중할 수 있음
여러 라이브러리를 제공해 개발의 생산성을 높일 수 있음
유지보수와 확장에 용이해 소프트웨어의 품질을 높임

client-server구조
웹 브라우저에서 서버에 메인 페이지를 보내달라고 요청
서버에서 응답을 보내면 웹 브라우저는 사용자가 볼 수 있도록 해석함 
-> 이 서버를 구현하는 프레임워크 django


###참고: https://married-spot-253.notion.site/Python-89514730def04096b9b42b4824c50967
가상 환경 : python application과 그에 따른 패키지들을 격리하여 관리할 수 
있는 독립적인 실행 환경
왜 가상환경이 필요한가? -> 예를 들어 한 프로젝트 내에서 각기 다른 여러 버전의 requests 패키지를 사용해야 하는 경우
지금까지 파이썬 전역 환경에서 실습을 진행해왔다면, 이제는 가상 환경에서 실습 진행할 예정
/ 두 패키지를 모두 사용해야 하지만 동일한 환경에서 함께 사용하면 충돌이 발생하는 경우


## 개발 환경 만들기 - 외워서 사용하도록 (반드시 bash터미널에서 수행할 것)##
# 가상환경 생성
$ python -m venv venv(가상환경 이름)

# 가상환경 활성화(on/off 개념)
:하나의 터미널 창에서는 하나의 가상환경만 활성화 할 수 있다..
전역환경에서 가상 환경으로 이동하는 개념이 아님!
$ source venv/Scripts/activate
-> 가상환경을 활성화한 다음 패키지를 설치하면 해당 환경에만 패키지가 설치된다.

# 가상환경 비활성화
: 가상환경을 비활성화하면 다시 전역환경이 됨
$ deactivate

# 현재 환경에 설치된 패키지 목록을 출력
$ pip list
왜 필요한가? -> 여러 명의 개발자가 가상환경을 이용해 하나의 프로젝트를 수행할 때,
가상환경을 이루는 패키지를 깃헙(원격저장소) 등에 공유하는 것이 아니라 
가상환경의 모습 즉, 패키지 목록을 공유해야 한다.(일반적으로 txt파일로 공유)
**venv폴더는 gitignore.에 담겨야 한다 
# 공유할 패키지 목록이 담긴 텍스트 문서(의존성 파일) 생성하기(패키지 목록에 변경이 생길 때마다 수동으로 업데이트 해야함)
$ pip freeze > requirements.txt
공유된 패키지 목록을 한번에 설치할 수 있다.
$ pip install -r requirements.txt(패키지 목록이 담긴 파일)
=> 물리적으로 다른 컴퓨터에서 전역환경과 분리된, 협업자 별로 동일한 개발 환경에서 프로젝트 수행이 가능하다. 

# 현재 디렉토리에 장고 프로젝트 생성
$ django-admin startproject firstpjt(프로젝트명) .
# django 서버 실행하기
$ python manage.py runserver
# 서버 종료
: ctrl + c

Django project
: 여러 application의 집합
Django application : 독립적으로 작동하는 기능 단위 모듈(예를 들어 게시판, 회원 관리 등)
application는 생성 및 '등록'과정이 필요하다.
# 앱 생성
$ python manage.py startapp articles(앱 이름, 복수형 권장)
# 앱 등록
firstpjt폴더의 settings.py에 새로 생성한 앱 정보를 기입해줌

프로젝트 구조
-settings.py : 프로젝트의 모든 설정을 관리
-urls.py : URL과 이에 해당하는 적절한 View를 찾아서 연결
-__init__.py : 해당 폴더를 패키지로 인식하도록 설정(삭제하면 해당 폴더를 패키지로서 import하여 사용할 수 없음)
-asgi.py, wsgi.py : 장고를 WAS로 배포할 수 있도록 도와준다. (동적 파일 처리, 데이터베이스 접근 등을 도와줌)
-manage.py : Django 프로젝트와 다양한 방법으로 상호작용 하는 커맨드라인 유틸리티
앱 구조
-admin.py : 관리자용 페이지 설정
-models.py : MTV패턴의 M 
-views.py : HTTP 요청을 처리하고 해당 요청에 대한 응답을 반환, MTV패턴의 V



<디자인 패턴>

디자인 패턴 : 소프트웨어 설계에서 발생하는 문제를 해결하기 위한 일반적인 해결책
-django는 MVC디자인 패턴을 차용 -> MTV 디자인 패턴(Model, Template, View)
-Model(데이터베이스), View(화면, 인터페이스), Controller(내부 조건, 비즈니스 로직)
-어플리케이션 구조화를 위한 대표적인 패턴
-시각적 요소와 로직을 서로 영향 없이 독립적이고 쉽게 유지 보수가 가능한 어플리케이션을 만들기 위함


브라우저에서 서버에 요청을 보냄 -> url.py -> app내에 있는 views.py가 models.py와 templates와 상호작용하여 응답을 보냄

※ css사용하기
1.프로젝트 폴더 내에서 app과 동일한 계층에 static폴더 생성하고 그 안에  css파일 추가 
2.settings.py 파일에 코드 추가
import os
STATICFILES_DIRS = [
  os.path.join(BASE_DIR, 'static')
]
3.html파일에서 해당 코드와 링크 태그 추가
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %}">

<bootstrap cdn>
css : <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
script : <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>

