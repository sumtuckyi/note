many to one relationship(1:N관계)
예) 하나의 게시글(1)에는 여러 개의 댓글(N)이 작성될 수 있지만, 하나의 댓글은 하나의 게시글에만 속한다.

comment table에는 해당 인스턴스(하나의 댓글)가 어떤 게시글에 속하는지 알려주는 속성(field)이 필요하다.
=> article table에 대한 외래키(FK)가 필요
-> 참조 된 객체가 삭제되었을 때 외래키 값을 어떻게 설정하여 데이터 무결성(data integrity)을 유지할 것인가?

※comment table을 생성하는 SQL문
CREATE TABLE "articles_comment" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content" varchar(200) NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "article_id" bigint NOT NULL REFERENCES "articles_article" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "articles_comment_article_id_59ff1409" ON "articles_comment" ("article_id");      
COMMIT;

★★comment객체(N)를 통해 참조한 article객체(1)의 속성에도 쉽게 접근할 수 있다. 
comment.article.pk
comment.article.content
댓글이 달린 게시글의 인덱스는 어떻게 알아낼 수 있을까? ->  
-comment.article_id(댓글 테이블의 외래키 속성값)
-comment.article.pk(참조하는 객체의 속성을 가져옴) 

1->N으로 접근하는 것(조회, 참조)을 역참조라고 하는데, 
이는 물리적으로 불가능하므로 장고가 제공하는
별도의 역참조 이름이 필요 (ex-objects)
-> article.comment_set.all()
 : article 인스턴스(1)를 참조하는 다른 테이블의 comment 인스턴스(N)를 모두(all()) 조회하기
comment_set는 related manager로 역참조시 사용하는 매니저이다. 